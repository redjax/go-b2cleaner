name: Release

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: "Release type (patch, minor, major)"
        required: true
        default: "patch"
        type: string
  push:
    tags:
      - "v*"

jobs:
  ## Create release tag
  tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      ## Auto-increment version based on existing tags and releaseType input
      - name: Auto Increment Semver Action
        id: versioning
        uses: MCKanpolat/auto-semver-action@v2
        with:
          releaseType: ${{ inputs.releaseType }}
          incrementPerCommit: false
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show next version
        run: echo "Next version is ${{ steps.versioning.outputs.version }}"

      - name: Create tag and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.versioning.outputs.version }}
          git push origin ${{ steps.versioning.outputs.version }}

      ## Save version for downstream jobs
      - name: Save version to file
        run: echo "${{ steps.versioning.outputs.version }}" > version.txt

      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: version.txt

  ## Build binaries
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version

      - name: Read version
        id: version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Fetch tags
        run: git fetch --tags

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.3"

      - name: Build
        env:
          CGO_ENABLED: 0
        run: |
          mkdir -p dist

          declare -a BuildPlatforms=("darwin/amd64" "darwin/arm64" "linux/amd64" "linux/arm64" "windows/amd64")

          for platform in "${BuildPlatforms[@]}"; do
            GOOS=${platform%/*}
            GOARCH=${platform#*/}
            export GOOS GOARCH

            OS_NAME=$GOOS
            if [ "$GOOS" = "darwin" ]; then OS_NAME="macOS"; fi

            BIN_NAME="b2cleaner"
            if [ "$GOOS" = "windows" ]; then
              BIN_NAME="b2cleaner.exe"
            fi

            ## Build app
            go build -o dist/$BIN_NAME .

            ZIP_NAME="b2cleaner-${VERSION}-${OS_NAME}-${GOARCH}.zip"
            zip -j dist/$ZIP_NAME dist/$BIN_NAME
            rm dist/$BIN_NAME
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*.zip

  ## Create Github release
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code at tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.VERSION }} # or ${{ steps.versioning.outputs.version }} if you pass it as an output/env

      - name: Fetch all tags
        run: git fetch --tags

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version

      - name: Read version
        id: version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Create Github release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
